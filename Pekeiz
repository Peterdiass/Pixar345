import React, { useState, useEffect } from "react";
import {
  View,
  Text,
  TextInput,
  ScrollView,
  StyleSheet,
  Image,
  TouchableOpacity,
  Linking,
} from "react-native";

const API_KEY = "a2bc5ae7dca19574b5b1091db59d48e4";
const BASE_URL = "https://api.themoviedb.org/3";
const IMAGE_BASE_URL = "https://image.tmdb.org/t/p/w500";

const App = () => {
  const [movies, setMovies] = useState([]);
  const [categories, setCategories] = useState([]);
  const [searchResults, setSearchResults] = useState([]);
  const [searchQuery, setSearchQuery] = useState("");
  const [randomMovie, setRandomMovie] = useState(null);

  // Buscar filmes populares
  const fetchMovies = async () => {
    try {
      const response = await fetch(
        `${BASE_URL}/movie/popular?api_key=${API_KEY}`
      );
      const data = await response.json();
      setMovies(data.results || []);
      setRandomMovie(
        data.results[Math.floor(Math.random() * data.results.length)]
      );
    } catch (error) {
      console.error("Erro ao buscar filmes populares:", error);
    }
  };

  // Buscar categorias (gêneros)
  const fetchCategories = async () => {
    try {
      const response = await fetch(
        `${BASE_URL}/genre/movie/list?api_key=${API_KEY}`
      );
      const data = await response.json();
      setCategories(data.genres || []);
    } catch (error) {
      console.error("Erro ao buscar categorias:", error);
    }
  };

  // Buscar filmes com base na pesquisa
  const searchMovies = async (query) => {
    if (!query) {
      setSearchResults([]);
      return;
    }

    try {
      const response = await fetch(
        `${BASE_URL}/search/movie?api_key=${API_KEY}&query=${query}`
      );
      const data = await response.json();
      setSearchResults(data.results || []);
    } catch (error) {
      console.error("Erro ao buscar filmes por pesquisa:", error);
    }
  };

  // Buscar trailers do filme
  const fetchTrailer = async (movieId) => {
    try {
      const response = await fetch(
        `${BASE_URL}/movie/${movieId}/videos?api_key=${API_KEY}`
      );
      const data = await response.json();
      const trailer = data.results.find(
        (video) => video.site === "YouTube" && video.type === "Trailer"
      );

      if (trailer) {
        // Se o trailer estiver disponível, redireciona para o YouTube
        Linking.openURL(`https://www.youtube.com/watch?v=${trailer.key}`);
      } else {
        alert("Trailer não disponível. Pesquise no YouTube.");
      }
    } catch (error) {
      console.error("Erro ao buscar trailer:", error);
    }
  };

  // Buscar filmes por categoria
  const fetchMoviesByCategory = async (categoryId) => {
    try {
      const response = await fetch(
        `${BASE_URL}/discover/movie?api_key=${API_KEY}&with_genres=${categoryId}`
      );
      const data = await response.json();
      return data.results || [];
    } catch (error) {
      console.error("Erro ao buscar filmes por categoria:", error);
      return [];
    }
  };

  useEffect(() => {
    fetchMovies();
    fetchCategories();
  }, []);

  return (
    <ScrollView style={styles.container}>
      {/* Barra de pesquisa */}
      <View style={styles.header}>
        <TextInput
          style={styles.searchBar}
          placeholder="Pesquisar filmes..."
          value={searchQuery}
          onChangeText={(text) => {
            setSearchQuery(text);
            searchMovies(text);
          }}
        />
        <Text style={styles.appName}>Prime IA</Text>
      </View>

      {/* Capa grande aleatória */}
      {randomMovie && (
        <View style={styles.randomMovie}>
          <Image
            source={{ uri: `${IMAGE_BASE_URL}${randomMovie.poster_path}` }}
            style={styles.randomMovieImage}
          />
          <View style={styles.randomMovieOverlay}>
            <Text style={styles.randomMovieTitle}>{randomMovie.title}</Text>
            <TouchableOpacity
              style={styles.watchButton}
              onPress={() => fetchTrailer(randomMovie.id)} // Aciona a busca pelo trailer
            >
              <Text style={styles.watchButtonText}>Assistir Agora</Text>
            </TouchableOpacity>
          </View>
        </View>
      )}

      {/* Resultados da pesquisa */}
      {searchQuery && searchResults.length > 0 && (
        <View style={styles.searchResults}>
          <Text style={styles.sectionTitle}>Resultados da Pesquisa</Text>
          <ScrollView horizontal>
            {searchResults.map((movie) => (
              <View key={movie.id} style={styles.movieCard}>
                <Image
                  source={{ uri: `${IMAGE_BASE_URL}${movie.poster_path}` }}
                  style={styles.moviePoster}
                />
                <Text style={styles.movieTitle}>{movie.title}</Text>
              </View>
            ))}
          </ScrollView>
        </View>
      )}

      {/* Fileiras de filmes por categoria */}
      {categories.map((category) => (
        <CategoryRow
          key={category.id}
          category={category}
          fetchMoviesByCategory={fetchMoviesByCategory}
        />
      ))}
    </ScrollView>
  );
};

// Componente para fileiras de filmes por categoria
const CategoryRow = ({ category, fetchMoviesByCategory }) => {
  const [categoryMovies, setCategoryMovies] = useState([]);

  useEffect(() => {
    const fetchData = async () => {
      const movies = await fetchMoviesByCategory(category.id);
      setCategoryMovies(movies);
    };
    fetchData();
  }, [category.id]);

  return (
    <View style={styles.categorySection}>
      <Text style={styles.sectionTitle}>{category.name}</Text>
      <ScrollView horizontal>
        {categoryMovies.map((movie) => (
          <View key={movie.id} style={styles.movieCard}>
            <Image
              source={{ uri: `${IMAGE_BASE_URL}${movie.poster_path}` }}
              style={styles.moviePoster}
            />
            <Text style={styles.movieTitle}>{movie.title}</Text>
          </View>
        ))}
      </ScrollView>
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: "#fff",
    padding: 10,
  },
  header: {
    flexDirection: "row",
    justifyContent: "space-between",
    alignItems: "center",
    marginBottom: 20,
  },
  searchBar: {
    flex: 1,
    padding: 10,
    borderColor: "black",
    borderWidth: 2,
    borderRadius: 20,
    marginRight: 10,
  },
  appName: {
    fontSize: 18,
    fontWeight: "bold",
    color: "black",
  },
  randomMovie: {
    position: "relative",
    marginBottom: 20,
  },
  randomMovieImage: {
    width: "100%",
    height: 200,
    borderRadius: 10,
  },
  randomMovieOverlay: {
    position: "absolute",
    top: "50%",
    left: "50%",
    transform: [{ translateX: -50 }, { translateY: -50 }],
    backgroundColor: "rgba(0, 0, 0, 0.5)",
    padding: 20,
    borderRadius: 10,
    alignItems: "center",
  },
  randomMovieTitle: {
    fontSize: 18,
    fontWeight: "bold",
    color: "#fff",
  },
  watchButton: {
    marginTop: 10,
    backgroundColor: "black",
    padding: 10,
    borderRadius: 5,
  },
  watchButtonText: {
    color: "white",
  },
  sectionTitle: {
    fontSize: 16,
    fontWeight: "bold",
    marginBottom: 10,
  },
  movieCard: {
    marginRight: 10,
    width: 120,
  },
  moviePoster: {
    width: "100%",
    height: 180,
    borderRadius: 10,
  },
  movieTitle: {
    fontSize: 12,
    marginTop: 5,
    textAlign: "center",
  },
});

export default App;
``
